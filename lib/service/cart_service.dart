import 'package:flutter/foundation.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:get/get.dart';
import 'package:flutter_application_jin/features/authentication/controllers/auth/auth_controller.dart';
import 'package:flutter_application_jin/features/shop/models/cart_model.dart';

/// Model ƒë·ªÉ hi·ªÉn th·ªã s·∫£n ph·∫©m trong gi·ªè h√†ng v·ªõi th√¥ng tin ƒë√£ ƒë∆∞·ª£c populate
class DisplayCartItem {
  final String productId;
  final String name;
  final double price;
  final double? discount;
  final double discountPrice;
  final String? unit;
  final List<String> images;
  final int quantity;
  final double totalDiscountPrice;
  bool isSelected; // Th√™m tr∆∞·ªùng n√†y cho checkbox

  DisplayCartItem({
    required this.productId,
    required this.name,
    required this.price,
    this.discount,
    required this.discountPrice,
    this.unit,
    required this.images,
    required this.quantity,
    required this.totalDiscountPrice,
    this.isSelected = true, // M·∫∑c ƒë·ªãnh ƒë∆∞·ª£c ch·ªçn
  });

  factory DisplayCartItem.fromJson(Map<String, dynamic> json) {
    // Parse images: Backend c√≥ th·ªÉ tr·∫£ v·ªÅ m·∫£ng c√°c object {url: String} ho·∫∑c m·∫£ng string
    List<String> parsedImages = [];
    if (json['images'] != null && json['images'] is List) {
      for (var img in (json['images'] as List)) {
        if (img is Map<String, dynamic> && img.containsKey('url')) {
          parsedImages.add(img['url'] as String);
        } else if (img is String) {
          parsedImages.add(img);
        }
      }
    }

    return DisplayCartItem(
      productId: json['_id'] as String? ?? json['productId'] as String,
      name: json['name'] as String,
      price: (json['price'] as num).toDouble(),
      discount: (json['discount'] as num?)?.toDouble(),
      discountPrice: (json['discountPrice'] as num).toDouble(),
      unit: json['unit'] as String?,
      images: parsedImages,
      quantity: json['quantity'] as int,
      totalDiscountPrice: (json['totalDiscountPrice'] as num).toDouble(),
      isSelected: json['isSelected'] as bool? ?? true, // M·∫∑c ƒë·ªãnh true
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'productId': productId,
      'name': name,
      'price': price,
      'discount': discount,
      'discountPrice': discountPrice,
      'unit': unit,
      'images': images,
      'quantity': quantity,
      'totalDiscountPrice': totalDiscountPrice,
      'isSelected': isSelected,
    };
  }

  // Th√™m method copyWith ƒë·ªÉ d·ªÖ d√†ng c·∫≠p nh·∫≠t
  DisplayCartItem copyWith({
    String? productId,
    String? name,
    double? price,
    double? discount,
    double? discountPrice,
    String? unit,
    List<String>? images,
    int? quantity,
    double? totalDiscountPrice,
    bool? isSelected,
  }) {
    return DisplayCartItem(
      productId: productId ?? this.productId,
      name: name ?? this.name,
      price: price ?? this.price,
      discount: discount ?? this.discount,
      discountPrice: discountPrice ?? this.discountPrice,
      unit: unit ?? this.unit,
      images: images ?? this.images,
      quantity: quantity ?? this.quantity,
      totalDiscountPrice: totalDiscountPrice ?? this.totalDiscountPrice,
      isSelected: isSelected ?? this.isSelected,
    );
  }

  @override
  String toString() {
    return 'DisplayCartItem(productId: $productId, name: $name, quantity: $quantity, totalDiscountPrice: $totalDiscountPrice, isSelected: $isSelected)';
  }
}

class CartService extends GetxService {
  static CartService get instance => Get.find();

  // S·ª≠ d·ª•ng FlutterSecureStorage cho t·∫•t c·∫£ token ƒë·ªÉ b·∫£o m·∫≠t t·ªët h∆°n
  static const FlutterSecureStorage _storage = FlutterSecureStorage(
    aOptions: AndroidOptions(
      encryptedSharedPreferences: true,
    ),
    iOptions: IOSOptions(
      accessibility: KeychainAccessibility.first_unlock_this_device,
    ),
  );

  static const String _baseUrl = 'http://localhost:1000/api';
  static const String _accessTokenKey = 'access_token';
  static const String _refreshTokenKey = 'refresh_token';
  static const String _userDataKey = 'user_data';
  static const String _tokenExpiryKey = 'token_expiry';

  // GetConnect instance cho HTTP requests
  final GetConnect _httpClient = GetConnect();

  @override
  void onInit() {
    super.onInit();
    _initializeHttpClient();
  }

  void _initializeHttpClient() {
    _httpClient.baseUrl = _baseUrl;
    _httpClient.timeout = const Duration(seconds: 30);
    
    // Interceptor ƒë·ªÉ t·ª± ƒë·ªông th√™m token v√†o headers
    _httpClient.httpClient.addRequestModifier<void>((request) async {
      final token = await AuthController.instance.getValidToken();
      if (token != null) {
        request.headers['Authorization'] = 'Bearer $token';
      }
      return request;
    });

    // Interceptor ƒë·ªÉ log response
    _httpClient.httpClient.addResponseModifier((request, response) {
      if (kDebugMode) {
        print('üì• Response: ${response.statusCode} ${response.request?.url}');
        print('üì• Body: ${response.bodyString}');
      }
      return response;
    });
  }



  // ============= TOKEN MANAGEMENT =============


  /// L·∫•y access token (ki·ªÉm tra h·∫øt h·∫°n)
  Future<String?> getAccessToken() async {
    try {
      final token = await _storage.read(key: _accessTokenKey);
      if (token == null) return null;

      // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
      final expiryString = await _storage.read(key: _tokenExpiryKey);
      if (expiryString != null) {
        final expiry = DateTime.fromMillisecondsSinceEpoch(int.parse(expiryString));
        if (DateTime.now().isAfter(expiry)) {
          debugPrint('Access token ƒë√£ h·∫øt h·∫°n, c·∫ßn refresh');
          await _deleteAccessToken();
          return null;
        }
      }

      return token;
    } catch (e) {
      debugPrint('L·ªói khi l·∫•y access token: $e');
      return null;
    }
  }

  /// Ki·ªÉm tra access token c√≥ h·ª£p l·ªá kh√¥ng
  Future<bool> isAccessTokenValid() async {
    final token = await getAccessToken();
    return token != null;
  }

  /// X√≥a access token
  Future<void> _deleteAccessToken() async {
    await _storage.delete(key: _accessTokenKey);
    await _storage.delete(key: _tokenExpiryKey);
  }


  /// L·∫•y refresh token
  Future<String?> getRefreshToken() async {
    return await _storage.read(key: _refreshTokenKey);
  }

  /// X√≥a refresh token
  Future<void> _deleteRefreshToken() async {
    await _storage.delete(key: _refreshTokenKey);
  }

  /// Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
  Future<bool> isLoggedIn() async {
    final accessToken = await getAccessToken();
    final refreshToken = await getRefreshToken();
    return accessToken != null || refreshToken != null;
  }

  /// X√≥a t·∫•t c·∫£ d·ªØ li·ªáu ƒëƒÉng nh·∫≠p
  Future<void> clearAllData() async {
    await _deleteAccessToken();
    await _deleteRefreshToken();
    await _storage.delete(key: _userDataKey);
  }

  // ============= HELPER METHODS =============

  /// Helper ƒë·ªÉ x·ª≠ l√Ω l·ªói chung t·ª´ API
  String _handleResponseError(Response response, String defaultMessage) {
    debugPrint('Error Response Status (CartService): ${response.statusCode}');
    debugPrint('Error Response Body (CartService): ${response.bodyString}');
    
    if (response.body != null && response.body is Map<String, dynamic>) {
      final errorData = response.body as Map<String, dynamic>;
      return errorData['message'] as String? ?? defaultMessage;
    }
    
    // Handle specific HTTP status codes
    switch (response.statusCode) {
      case 401:
        return 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
      case 403:
        return 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.';
      case 404:
        return 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu.';
      case 422:
        return 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.';
      case 500:
        return 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau.';
      default:
        return defaultMessage;
    }
  }

  /// Helper ƒë·ªÉ ki·ªÉm tra authentication tr∆∞·ªõc khi g·ªçi API
  Future<void> _ensureAuthenticated() async {
    try {
      // Ki·ªÉm tra AuthController c√≥ t·ªìn t·∫°i kh√¥ng
      if (!Get.isRegistered<AuthController>()) {
        throw 'AuthController ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.';
      }

      final authController = Get.find<AuthController>();
      
      if (!authController.isLoggedIn.value) {
        throw 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng gi·ªè h√†ng.';
      }
      
      final token = await authController.getValidToken();
      if (token == null) {
        throw 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
      }
    } catch (e) {
      debugPrint('L·ªói authentication check trong CartService: $e');
      rethrow;
    }
  }

  // ============= CART API METHODS =============

  /// L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng (d·ªØ li·ªáu ƒë√£ populate ƒë·ªÉ hi·ªÉn th·ªã)
  /// Backend: GET /carts
 Future<List<DisplayCartItem>> getCart() async {
  try {
    // Attempt to get a valid token, refresh if needed
    final authController = Get.find<AuthController>();
    final token = await authController.getValidToken();

    if (token == null) {
      throw 'Kh√¥ng th·ªÉ l·∫•y token h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
    }

    final response = await _httpClient.get('/carts',
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );
    
    if (response.statusCode == 200) {
      final responseData = response.body;

      // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ format {success: true, data: [...]}
      if (responseData is Map<String, dynamic>) {
        if (responseData['success'] == true && responseData['data'] is List) {
          final List<dynamic> itemsJson = responseData['data'];
          return itemsJson
              .map((json) => DisplayCartItem.fromJson(json as Map<String, dynamic>))
              .toList();
        }

        // Tr∆∞·ªùng h·ª£p tr·∫£ v·ªÅ {items: [...]}
        if (responseData['items'] is List) {
          final List<dynamic> itemsJson = responseData['items'];
          return itemsJson
              .map((json) => DisplayCartItem.fromJson(json as Map<String, dynamic>))
              .toList();
        }
      }

      // N·∫øu tr·∫£ v·ªÅ tr·ª±c ti·∫øp l√† m·ªôt List
      if (responseData is List) {
        return responseData
            .map((json) => DisplayCartItem.fromJson(json as Map<String, dynamic>))
            .toList();
      }

      // Tr∆∞·ªùng h·ª£p gi·ªè h√†ng tr·ªëng ho·∫∑c kh√¥ng r√µ ƒë·ªãnh d·∫°ng
      return [];
    }

    final errorMessage = _handleResponseError(response, 'Kh√¥ng th·ªÉ l·∫•y gi·ªè h√†ng.');
    throw errorMessage;
  } catch (e) {
    debugPrint('L·ªói trong CartService.getCart: $e');
    if (e is String) {
      throw e;
    }
    throw 'L·ªói khi l·∫•y gi·ªè h√†ng: ${e.toString()}';
  }
}

  /// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  /// Backend: POST /carts/add
  Future<CartModel?> addToCart({
    required String productId,
    required int quantity,
  }) async {
    try {
      await _ensureAuthenticated();
      
      if (quantity <= 0) {
        throw 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0.';
      }
      
      final body = {
        'productId': productId,
        'quantity': quantity,
      };
      
      debugPrint("CartService addToCart Body: $body");
      
      final response = await _httpClient.post('/carts/add', body);

      if (response.statusCode == 200 || response.statusCode == 201) {
        // ƒê∆°n gi·∫£n: ch·ªâ return null, ƒë·ªÉ fetchCart() x·ª≠ l√Ω
        debugPrint("Add to cart th√†nh c√¥ng, return null ƒë·ªÉ refetch");
        return null;
      }
      
      final errorMessage = _handleResponseError(response, 'Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng.');
      throw errorMessage;
    } catch (e) {
      debugPrint('L·ªói trong CartService.addToCart: $e');
      if (e is String) {
        throw e;
      }
      throw 'L·ªói khi th√™m v√†o gi·ªè h√†ng: ${e.toString()}';
    }
  }

  /// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  /// Backend: PATCH /carts/update
  Future<CartModel?> updateCartItem({
  required String productId,
  required int quantity,
}) async {
  try {
    await _ensureAuthenticated();
    
    if (quantity < 0) {
      throw 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng th·ªÉ √¢m.';
    }
    
    final body = {
      'productId': productId,
      'quantity': quantity,
    };
    
    // Debug mobile request
    debugPrint("Mobile UpdateCartItem Request: $body");
    
    final response = await _httpClient.post('/carts/update', body);

    // Debug mobile response  
    debugPrint("Mobile UpdateCartItem Status: ${response.statusCode}");
    debugPrint("Mobile UpdateCartItem Body: ${response.bodyString}");

    if (response.statusCode == 200) {
      // ƒê∆°n gi·∫£n: ch·ªâ return null, ƒë·ªÉ fetchCart() x·ª≠ l√Ω
      debugPrint("Update th√†nh c√¥ng, return null ƒë·ªÉ refetch");
      return null;
    }
    
    final errorMessage = _handleResponseError(response, 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng.');
    throw errorMessage;
  } catch (e) {
    debugPrint('L·ªói trong CartService.updateCartItem: $e');
    if (e is String) {
      throw e;
    }
    throw 'L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng: ${e.toString()}';
  }
}
  /// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  /// Backend: DELETE /carts/remove/:productId
  Future<CartModel?> removeCartItem(String productId) async {
    try {
      await _ensureAuthenticated();
      
      final response = await _httpClient.delete('/carts/remove/$productId');

      if (response.statusCode == 200) {
        final responseData = response.body;
        
        if (responseData is Map<String, dynamic> &&
            responseData['success'] == true &&
            responseData['data'] != null) {
          return CartModel.fromJson(responseData['data'] as Map<String, dynamic>);
        }
      } else if (response.statusCode == 204) {
        // 204 No Content - x√≥a th√†nh c√¥ng nh∆∞ng kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu
        debugPrint('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng');
        return null;
      }
      
      final errorMessage = _handleResponseError(response, 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.');
      throw errorMessage;
    } catch (e) {
      debugPrint('L·ªói trong CartService.removeCartItem: $e');
      if (e is String) {
        throw e;
      }
      throw 'L·ªói khi x√≥a s·∫£n ph·∫©m: ${e.toString()}';
    }
  }

  /// X√≥a to√†n b·ªô gi·ªè h√†ng
  /// Backend: DELETE /carts/clear
  Future<CartModel?> clearCart() async {
    try {
      await _ensureAuthenticated();
      
      final response = await _httpClient.delete('/carts/clear');

      if (response.statusCode == 200) {
        final responseData = response.body;
        
        if (responseData is Map<String, dynamic> &&
            responseData['success'] == true &&
            responseData['data'] != null) {
          return CartModel.fromJson(responseData['data'] as Map<String, dynamic>);
        }
      } else if (response.statusCode == 204) {
        // 204 No Content - x√≥a th√†nh c√¥ng
        debugPrint('Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng');
        return null;
      }
      
      final errorMessage = _handleResponseError(response, 'Kh√¥ng th·ªÉ x√≥a to√†n b·ªô gi·ªè h√†ng.');
      throw errorMessage;
    } catch (e) {
      debugPrint('L·ªói trong CartService.clearCart: $e');
      if (e is String) {
        throw e;
      }
      throw 'L·ªói khi x√≥a to√†n b·ªô gi·ªè h√†ng: ${e.toString()}';
    }
  }

  // ============= UTILITY METHODS =============

  /// ƒê·∫øm s·ªë l∆∞·ª£ng item trong gi·ªè h√†ng
  Future<int> getCartItemCount() async {
    try {
      final cartItems = await getCart();
      return cartItems.fold<int>(0, (sum, item) => sum + item.quantity);
    } catch (e) {
      debugPrint('L·ªói khi ƒë·∫øm s·ªë l∆∞·ª£ng item trong gi·ªè h√†ng: $e');
      return 0;
    }
  }

  /// ƒê·∫øm s·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√°c nhau trong gi·ªè h√†ng
  Future<int> getUniqueItemCount() async {
    try {
      final cartItems = await getCart();
      return cartItems.length;
    } catch (e) {
      debugPrint('L·ªói khi ƒë·∫øm s·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√°c nhau: $e');
      return 0;
    }
  }

  /// T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng
  Future<double> getCartTotal() async {
    try {
      final cartItems = await getCart();
      return cartItems.fold<double>(0.0, (sum, item) => sum + item.totalDiscountPrice);
    } catch (e) {
      debugPrint('L·ªói khi t√≠nh t·ªïng gi√° tr·ªã gi·ªè h√†ng: $e');
      return 0.0;
    }
  }

  /// T√≠nh t·ªïng ti·ªÅn tr∆∞·ªõc khi gi·∫£m gi√°
  Future<double> getCartSubtotal() async {
    try {
      final cartItems = await getCart();
      return cartItems.fold<double>(0.0, (sum, item) => sum + (item.price * item.quantity));
    } catch (e) {
      debugPrint('L·ªói khi t√≠nh subtotal gi·ªè h√†ng: $e');
      return 0.0;
    }
  }

  /// T√≠nh t·ªïng s·ªë ti·ªÅn ti·∫øt ki·ªám ƒë∆∞·ª£c
  Future<double> getCartSavings() async {
    try {
      final subtotal = await getCartSubtotal();
      final total = await getCartTotal();
      return subtotal - total;
    } catch (e) {
      debugPrint('L·ªói khi t√≠nh s·ªë ti·ªÅn ti·∫øt ki·ªám: $e');
      return 0.0;
    }
  }

  /// Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng kh√¥ng
  Future<bool> isProductInCart(String productId) async {
    try {
      final cartItems = await getCart();
      return cartItems.any((item) => item.productId == productId);
    } catch (e) {
      debugPrint('L·ªói khi ki·ªÉm tra s·∫£n ph·∫©m trong gi·ªè h√†ng: $e');
      return false;
    }
  }

  /// L·∫•y s·ªë l∆∞·ª£ng c·ªßa m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ trong gi·ªè h√†ng
  Future<int> getProductQuantityInCart(String productId) async {
    try {
      final cartItems = await getCart();
      final item = cartItems.firstWhereOrNull((item) => item.productId == productId);
      return item?.quantity ?? 0;
    } catch (e) {
      debugPrint('L·ªói khi l·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng: $e');
      return 0;
    }
  }

  /// Ki·ªÉm tra gi·ªè h√†ng c√≥ tr·ªëng kh√¥ng
  Future<bool> isCartEmpty() async {
    try {
      final count = await getUniqueItemCount();
      return count == 0;
    } catch (e) {
      debugPrint('L·ªói khi ki·ªÉm tra gi·ªè h√†ng tr·ªëng: $e');
      return true;
    }
  }
}