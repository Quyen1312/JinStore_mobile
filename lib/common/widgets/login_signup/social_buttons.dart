import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_application_jin/features/authentication/controllers/auth/auth_controller.dart';
import 'package:flutter_application_jin/service/google_signin_exception.dart';
import 'package:flutter_application_jin/service/google_signin_service.dart';
import 'package:flutter_application_jin/utils/constants/colors.dart';
import 'package:flutter_application_jin/utils/constants/images.dart';
import 'package:flutter_application_jin/utils/constants/sizes.dart';
import 'package:flutter_application_jin/utils/popups/loaders.dart';
import 'package:get/get.dart';

class SocialButtons extends StatefulWidget {
  const SocialButtons({super.key});

  @override
  State<SocialButtons> createState() => _SocialButtonsState();
}

class _SocialButtonsState extends State<SocialButtons> {
  final AuthController authController = Get.find<AuthController>();
  final GoogleSignInService googleService = GoogleSignInService.instance;
  
  bool isGoogleLoading = false;

  @override
  void initState() {
    super.initState();
    // ‚úÖ Kh√¥ng g·ªçi initialize() ·ªü ƒë√¢y n·ªØa ƒë·ªÉ tr√°nh double init
    // GoogleSignInService ƒë√£ ƒë∆∞·ª£c init trong main.dart
    print('üì± [SocialButtons] Initialized, GoogleSignIn status: ${googleService.isInitialized}');
  }

  /// ‚úÖ X·ª≠ l√Ω ƒëƒÉng nh·∫≠p Google - Support c·∫£ Web v√† Mobile
  Future<void> _handleGoogleSignIn() async {
    if (isGoogleLoading) return; // Prevent double tap

    setState(() {
      isGoogleLoading = true;
    });

    try {
      print('üöÄ [SocialButtons] Starting Google Sign-In flow on ${kIsWeb ? 'Web' : 'Mobile'}...');
      
      // ‚úÖ Show loading feedback
      Loaders.customToast(message: kIsWeb 
          ? 'ƒêang k·∫øt n·ªëi v·ªõi Google (Web)...' 
          : 'ƒêang k·∫øt n·ªëi v·ªõi Google...');

      // ‚úÖ Step 1: Get Token from Google (Web or Mobile)
      final String? token = await googleService.signInWithGoogle();
      
      if (token == null) {
        // User cancelled - kh√¥ng ph·∫£i l·ªói
        print('‚ÑπÔ∏è [SocialButtons] User cancelled Google Sign-In');
        return;
      }

      print('‚úÖ [SocialButtons] Got token from Google (${kIsWeb ? 'Web' : 'Mobile'})');

      // ‚úÖ Step 2: Send token to backend 
      print('üì§ [SocialButtons] Sending token to backend...');
      
      if (kIsWeb) {
        // ‚úÖ Web: Real backend call (b·∫≠t t√≠nh nƒÉng n√†y)
        try {
          await authController.loginWithGoogle(idToken: token);
          print('üéâ [SocialButtons] Web Google Sign-In with backend completed!');
          _navigateToMainApp();
        } catch (backendError) {
          print('‚ùå [SocialButtons] Backend error on web: $backendError');
          // Fallback: Show demo success n·∫øu backend fail
          _showWebSuccessDemo(token);
        }
      } else {
        // Mobile: Real backend call
        await authController.loginWithGoogle(idToken: token);
        print('üéâ [SocialButtons] Google Sign-In flow completed successfully!');
        _navigateToMainApp();
      }

    } on GoogleSignInCancelledException {
      // User cancelled - kh√¥ng c·∫ßn hi·ªÉn th·ªã error
      print('‚ÑπÔ∏è [SocialButtons] User cancelled Google Sign-In');
      
    } on GoogleSignInNetworkException catch (e) {
      print('‚ùå [SocialButtons] Network error: $e');
      Loaders.errorSnackBar(
        title: 'L·ªói k·∫øt n·ªëi',
        message: 'Ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.',
      );
      await _cleanupGoogleSession();
      
    } on GoogleSignInConfigException catch (e) {
      print('‚ùå [SocialButtons] Config error: $e');
      Loaders.errorSnackBar(
        title: 'L·ªói c·∫•u h√¨nh',
        message: '·ª®ng d·ª•ng ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.',
      );
      await _cleanupGoogleSession();
      
    } on GoogleSignInException catch (e) {
      print('‚ùå [SocialButtons] Google Sign-In error: $e');
      Loaders.errorSnackBar(
        title: 'ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i',
        message: GoogleSignInErrorHandler.getUserFriendlyMessage(e),
      );
      await _cleanupGoogleSession();
      
    } catch (error) {
      print('‚ùå [SocialButtons] Unexpected error: $error');
      
      // ‚úÖ Handle backend/AuthController errors
      String errorMessage = error.toString();
      if (errorMessage.startsWith('Exception: ')) {
        errorMessage = errorMessage.replaceFirst('Exception: ', '');
      }
      
      // ‚úÖ Show user-friendly error
      Loaders.errorSnackBar(
        title: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',
        message: _getBackendErrorMessage(errorMessage),
      );
      
      // ‚úÖ Cleanup Google session on backend error
      await _cleanupGoogleSession();
      
    } finally {
      if (mounted) {
        setState(() {
          isGoogleLoading = false;
        });
      }
    }
  }

  /// ‚úÖ Demo success cho Web development
  void _showWebSuccessDemo(String token) {
    // Get current Google user info
    final currentUser = googleService.currentUser;
    
    Get.dialog(
      AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.check_circle, color: Colors.green),
            SizedBox(width: 8),
            Text('Google Sign-In Success!'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('üéâ Google Sign-In ho·∫°t ƒë·ªông th√†nh c√¥ng!'),
            const SizedBox(height: 12),
            if (currentUser != null) ...[
              Text('üë§ User: ${currentUser.displayName}'),
              Text('üìß Email: ${currentUser.email}'),
              const SizedBox(height: 8),
            ],
            Text('üé´ Token: ${token.substring(0, 30)}...'),
            const SizedBox(height: 12),
            const Text('üöÄ B√¢y gi·ªù s·∫Ω chuy·ªÉn ƒë·∫øn trang ch√≠nh c·ªßa ·ª©ng d·ª•ng!'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              // ‚úÖ FIX: ƒê√≥ng dialog tr∆∞·ªõc khi navigate
              Navigator.of(Get.context!).pop();
              _navigateToMainApp();
            },
            child: const Text('V√†o ·ª©ng d·ª•ng'),
          ),
          TextButton(
            onPressed: () {
              // ‚úÖ FIX: D√πng Navigator thay v√¨ Get.back()
              Navigator.of(Get.context!).pop();
            },
            child: const Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }

  /// ‚úÖ Navigate to main app (NavigationMenu)
  void _navigateToMainApp() {
    print('üéØ [SocialButtons] Navigating to NavigationMenu...');
    
    // Clear all previous routes and go to NavigationMenu
    Get.offAllNamed('/navigation-menu');
    
    // Show success message
    Loaders.successSnackBar(
      title: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
      message: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi JinStore üéâ',
    );
  }

  /// ‚úÖ Cleanup Google session khi c√≥ l·ªói
  Future<void> _cleanupGoogleSession() async {
    try {
      await googleService.signOut();
      print('üßπ [SocialButtons] Google session cleaned up');
    } catch (e) {
      print('‚ö†Ô∏è [SocialButtons] Failed to cleanup Google session: $e');
    }
  }

  /// ‚úÖ Convert backend error th√†nh user-friendly message
  String _getBackendErrorMessage(String error) {
    final String lowerError = error.toLowerCase();
    
    if (lowerError.contains('network') || lowerError.contains('connection')) {
      return 'L·ªói k·∫øt n·ªëi server. Vui l√≤ng th·ª≠ l·∫°i sau.';
    }
    
    if (lowerError.contains('invalid') && lowerError.contains('token')) {
      return 'L·ªói x√°c th·ª±c Google. Vui l√≤ng th·ª≠ l·∫°i.';
    }
    
    if (lowerError.contains('user not found') || lowerError.contains('account')) {
      return 'Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i.';
    }
    
    if (lowerError.contains('server') || lowerError.contains('500')) {
      return 'L·ªói server t·∫°m th·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.';
    }
    
    // Default message
    return 'ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.';
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Container(
          decoration: BoxDecoration(
            border: Border.all(color: AppColors.grey),
            borderRadius: BorderRadius.circular(100),
          ),
          child: Stack(
            children: [
              IconButton(
                onPressed: isGoogleLoading ? null : _handleGoogleSignIn,
                tooltip: kIsWeb 
                    ? 'ƒêƒÉng nh·∫≠p Google (Web Development)'
                    : 'ƒêƒÉng nh·∫≠p v·ªõi Google',
                icon: Opacity(
                  opacity: isGoogleLoading ? 0.5 : 1.0,
                  child: const Image(
                    height: AppSizes.iconMd,
                    width: AppSizes.iconMd,
                    image: AssetImage(Images.google),
                  ),
                ),
              ),
              
              // ‚úÖ Loading indicator
              if (isGoogleLoading)
                Positioned.fill(
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(100),
                    ),
                    child: const Center(
                      child: SizedBox(
                        height: 20,
                        width: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(AppColors.primary),
                        ),
                      ),
                    ),
                  ),
                ),
                
              // ‚úÖ Platform indicator
              if (kIsWeb)
                Positioned(
                  right: 0,
                  top: 0,
                  child: Container(
                    width: 12,
                    height: 12,
                    decoration: const BoxDecoration(
                      color: Colors.blue,
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.web,
                      size: 8,
                      color: Colors.white,
                    ),
                  ),
                ),
            ],
          ),
        ),
      ],
    );
  }

  @override
  void dispose() {
    // Cleanup n·∫øu c·∫ßn
    super.dispose();
  }
}